# -*- coding: utf-8 -*-
"""Pandas_02082025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lQt9076RiFTEBKGYdDdsTNiDkx5y9Ekn
"""

# imported pandas and numpy
import pandas as pd
import numpy as np

# reading the TSV file as table format and assigning to a local variable
chipo=pd.read_table("https://raw.githubusercontent.com/Laxminarayen/Inceptez-batch-25-Classwork/refs/heads/main/Python-Class10-Pandas-Intermediate/chipotle.tsv")

#reading he first 10 rows
chipo.head(10)

#find number of observations
chipo.shape[0]

len(chipo)

type(chipo) # pandas.core.frame.DataFrame

# Get whole infomration about the data frame
chipo.info()

# get eh number of columns in the data set
# order_id and quantity has only numbers so corresponding int64 is assinged
chipo.dtypes

# number of columns in the data frame
chipo.dtypes.count()

# print thhe names of columns
chipo.columns # visually this is a LIST but treated as Object

#indexing of the dataset - position based index
chipo.index

chipo.iloc

chipo.iloc.obj

# when i set the index to label based the default indexing disappeared
chipo.set_index('order_id')

chipo.index

# most ordered items
chipo.item_name.max() # This gives max value of the column item_name

type(chipo.groupby('item_name').sum('quantity').sort_values('quantity', ascending=False))

chipo.groupby('item_name').sum('quantity').sort_values('quantity', ascending=False).head(1)

type(chipo[['item_name', 'quantity']].groupby(['item_name']).sum(['quantity']).sort_values(['quantity'],ascending=False))

# most ordered item can be arrived by getting sum of quantity by each item and getting max
# item_name           4622 -- this contains no NULL values so cleancing is NOT required
chipo[['item_name', 'quantity']].groupby(['item_name']).sum(['quantity']).sort_values(['quantity'],ascending=False).first_valid_index()

# number of times "Chicken Bowl" is ordered
chipo[chipo['item_name'] == 'Chicken Bowl'].quantity.sum()

# choice description has NaN values. So fil it first
chipo[['choice_description','quantity']].groupby('choice_description').sum('quantity').sort_values('quantity', ascending=False).head(1)

# unique items ordered
chipo.item_name.unique()

# total number of items (quantity) present in the given data
chipo.quantity.sum()

# How much was the revenue in the dataset
chipo.info()

chipo['choice_description'] = chipo['choice_description'].fillna('Not Available')

chipo.head(5)

1^2

chipo['item_price_str'] = None
chipo['quantity_sqr'] = None
chipo['revenue_row'] = None
for i in range(0,chipo.shape[0]):
  chipo['item_price_str'][i] = float(str(chipo.item_price[i])[1::].strip())
  chipo['quantity_sqr'][i] = (chipo.quantity[i]*chipo.quantity[i])
  chipo.loc[i,'revenue_row'] = chipo.quantity[i]*chipo.item_price_str[i]

chipo.head(5)

# total revenue per row
# 1. Convert teh object into string
# 2. Remove the 0 index from the string with is '$'
# 3. convert the resultant string to a float so it can be arithmetically mulpilied with quantity which is an integer
chipo['lambda_revenue'] = chipo.item_price.apply(lambda x:(float(str(x)[1::]))) * chipo.quantity

chipo[['item_name', 'quantity', 'item_price', 'lambda_revenue']].head(5)

# total revenue
chipo.lambda_revenue.sum()

# total revenue
chipo.revenue_row.sum()

revenue = chipo['quantity'] * chipo['item_price']
print(revenue)

# total revenue
type(chipo.item_price)

# how many orders were made in this period
chipo.order_id.nunique()

pd.read_csv

from os import sep
chipo_01=pd.read_csv("https://raw.githubusercontent.com/Laxminarayen/Inceptez-batch-25-Classwork/refs/heads/main/Python-Class10-Pandas-Intermediate/chipotle.tsv",
                     sep= '\t')

chipo_01.head(5)