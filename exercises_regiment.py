# -*- coding: utf-8 -*-
"""Exercises_Regiment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-ZrrBtnGN4g0d0HFdyryx_6MkW22bd6-

# Regiment

### Introduction:

Special thanks to: http://chrisalbon.com/ for sharing the dataset and materials.

### Step 1. Import the necessary libraries
"""

import pandas as pd
import numpy as np

"""### Step 2. Create the DataFrame with the following values:"""

raw_data = {'regiment': ['Nighthawks', 'Nighthawks', 'Nighthawks', 'Nighthawks', 'Dragoons', 'Dragoons', 'Dragoons', 'Dragoons', 'Scouts', 'Scouts', 'Scouts', 'Scouts'],
        'company': ['1st', '1st', '2nd', '2nd', '1st', '1st', '2nd', '2nd','1st', '1st', '2nd', '2nd'],
        'name': ['Miller', 'Jacobson', 'Ali', 'Milner', 'Cooze', 'Jacon', 'Ryaner', 'Sone', 'Sloan', 'Piger', 'Riani', 'Ali'],
        'preTestScore': [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3],
        'postTestScore': [25, 94, 57, 62, 70, 25, 94, 57, 62, 70, 62, 70]}

type(raw_data) # this is a dictionary

raw_data

"""### Step 3. Assign it to a variable called regiment.
#### Don't forget to name each column
"""

# converting th edictionary to a dataframe to viw this is a tabular format
regiment = pd.DataFrame(raw_data)

type(regiment)

regiment

"""### Step 4. What is the mean preTestScore from the regiment Nighthawks?  """

# Rounding the value to 2 decimals
round(regiment['preTestScore'].mean(), 2)

regiment

nighthawk_regime = regiment[(regiment['regiment'] == 'Nighthawks')]

nighthawk_regime

# finding Mean of pretestscore of Nighthawks regime
round(regiment[(regiment['regiment'] == 'Nighthawks')]['preTestScore'].mean(), 2)

"""### Step 5. Present general statistics by company"""

regiment.groupby(['regiment', 'company']).sum()

# this si used to give the general stats of the data frame
regiment.groupby(['regiment', 'company']).describe()

"""### Step 6. What is the mean of each company's preTestScore?"""

# Mean of Pretestscore grouped by regiment and company
# group by should NOT be a tuple instead it should be individual columns since it is grouped by more than 1 column
regiment[['preTestScore']].groupby([regiment['regiment'], regiment['company']]).mean()

# Mean of Pretestscore grouped by company
round(regiment.groupby(['company']).mean('preTestScore'), 2)

"""### Step 7. Present the mean preTestScores grouped by regiment and company"""

# Mean of Pretestscore grouped by regiment and company
regiment.groupby(['regiment', 'company']).mean('preTestScore')

regiment[['preTestScore']].groupby([regiment['regiment'], regiment['company']]).mean()

hierarchial_index = regiment.groupby(['regiment', 'company']).mean('preTestScore')
hierarchial_index

type(hierarchial_index)

hierarchial_index.shape

hierarchial_index.index

"""### Step 8. Present the mean preTestScores grouped by regiment and company without heirarchical indexing"""

# Hierarchial indexing is implicitly formed when we use groupby clause
# multi level of indexing happens
# as_index clause is default TRUE so the columns with which dataframe is grouped are formed as index
"""
/tmp/ipython-input-2137482598.py:3: FutureWarning: A grouping was used that is not in the columns of the DataFrame and so was excluded from the result.
This grouping will be included in a future version of pandas. Add the grouping as a column of the DataFrame to silence this warning.
  regiment[['preTestScore']].groupby([regiment['regiment'], regiment['company']], as_index=False).mean()
"""
regiment[['preTestScore']].groupby([regiment['regiment'], regiment['company']], as_index=False).mean()

"""### Step 9. Group the entire dataframe by regiment and company"""

regiment_grouped_by = regiment.groupby(['regiment', 'company'])
regiment_grouped_by # this is a DataFrameGroupBy object

"""### Step 10. What is the number of observations in each regiment and company"""

# each regiment + company combination can have only one row since the DF is grouped by regiment+company combination
regiment_grouped_by.describe()

"""### Step 11. Iterate over a group and print the name and the whole data from the regiment"""

# group by data frame is iterated using a FOR loop
for group_name, group_data in regiment_grouped_by:
    print(f"Group Name: {group_name}")
    print("Group Data:")
    print(group_data)
    print("##" * 30) # Separator for better readability